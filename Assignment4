
class Node: 


	def __init__(self, data): 
		self.data = data 
		self.next = None

class LinkedList: 


	def __init__(self): 
		self.head = None


	def push(self, new_data): 
		new_node = Node(new_data) 
		new_node.next = self.head 
		self.head = new_node 

	def deleteNode(self, key): 
		
		
		temp = self.head 


		if (temp is not None): 
			if (temp.data == key): 
				self.head = temp.next
				temp = None
				return

	
		while(temp is not None): 
			if temp.data == key: 
				break
			prev = temp 
			temp = temp.next


		if(temp == None): 
			return

		
		prev.next = temp.next

		temp = None

	def printList(self): 
		temp = self.head 
		while(temp): 
			print (" %d" %(temp.data)), 
			temp = temp.next

llist = LinkedList() 
llist.push(7) 
llist.push(1) 
llist.push(3) 
llist.push(2) 

print ("Created Linked List: ") 
llist.printList() 
llist.deleteNode(7) 
print ("\nLinked List after Deletion :") 
llist.printList() 


Ans of 2:


class Node: 
	def __init__(self, key): 
		self.left = None
		self.right = None
		self.val = key 



def insert(root, key): 
	if root is None: 
		return Node(key) 
	else: 
		if root.val == key: 
			return root 
		elif root.val < key: 
			root.right = insert(root.right, key) 
		else: 
			root.left = insert(root.left, key) 
	return root 



def inorder(root): 
	if root: 
		inorder(root.left) 
		print(root.val) 
		inorder(root.right)

r = Node(50) 
r = insert(r, 30) 
r = insert(r, 20) 
r = insert(r, 40) 
r = insert(r, 70) 
r = insert(r, 60) 
r = insert(r, 80) 

inorder(r) 

Ans of 3:

class Node: 

	def __init__(self, data): 
		self.data = data 
		self.next = None

class LinkedList: 

	def __init__(self): 
		self.head = None

	def push(self, new_data): 
		new_node = Node(new_data) 
		new_node.next = self.head 
		self.head = new_node 

	 
	def printMiddle(self): 
		slow_ptr = self.head 
		fast_ptr = self.head 

		if self.head is not None: 
			while (fast_ptr is not None and fast_ptr.next is not None): 
				fast_ptr = fast_ptr.next.next
				slow_ptr = slow_ptr.next
			print("The middle element is: ", slow_ptr.data) 

list1 = LinkedList() 
list1.push(5) 
list1.push(4) 
list1.push(2) 
list1.push(3) 
list1.push(1) 
list1.printMiddle() 
